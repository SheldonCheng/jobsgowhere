// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Skill is an object representing the database table.
type Skill struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *skillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L skillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SkillColumns = struct {
	ID          string
	Title       string
	Description string
}{
	ID:          "id",
	Title:       "title",
	Description: "description",
}

// Generated where

var SkillWhere = struct {
	ID          whereHelperstring
	Title       whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"skill\".\"id\""},
	Title:       whereHelperstring{field: "\"skill\".\"title\""},
	Description: whereHelpernull_String{field: "\"skill\".\"description\""},
}

// SkillRels is where relationship names are stored.
var SkillRels = struct {
	JobSkillMaps       string
	RelatedSkillSkills string
	PrimarySkillSkills string
}{
	JobSkillMaps:       "JobSkillMaps",
	RelatedSkillSkills: "RelatedSkillSkills",
	PrimarySkillSkills: "PrimarySkillSkills",
}

// skillR is where relationships are stored.
type skillR struct {
	JobSkillMaps       JobSkillMapSlice
	RelatedSkillSkills SkillSlice
	PrimarySkillSkills SkillSlice
}

// NewStruct creates a new relationship struct
func (*skillR) NewStruct() *skillR {
	return &skillR{}
}

// skillL is where Load methods for each relationship are stored.
type skillL struct{}

var (
	skillAllColumns            = []string{"id", "title", "description"}
	skillColumnsWithoutDefault = []string{"id", "title", "description"}
	skillColumnsWithDefault    = []string{}
	skillPrimaryKeyColumns     = []string{"id"}
)

type (
	// SkillSlice is an alias for a slice of pointers to Skill.
	// This should generally be used opposed to []Skill.
	SkillSlice []*Skill
	// SkillHook is the signature for custom Skill hook methods
	SkillHook func(context.Context, boil.ContextExecutor, *Skill) error

	skillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	skillType                 = reflect.TypeOf(&Skill{})
	skillMapping              = queries.MakeStructMapping(skillType)
	skillPrimaryKeyMapping, _ = queries.BindMapping(skillType, skillMapping, skillPrimaryKeyColumns)
	skillInsertCacheMut       sync.RWMutex
	skillInsertCache          = make(map[string]insertCache)
	skillUpdateCacheMut       sync.RWMutex
	skillUpdateCache          = make(map[string]updateCache)
	skillUpsertCacheMut       sync.RWMutex
	skillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var skillBeforeInsertHooks []SkillHook
var skillBeforeUpdateHooks []SkillHook
var skillBeforeDeleteHooks []SkillHook
var skillBeforeUpsertHooks []SkillHook

var skillAfterInsertHooks []SkillHook
var skillAfterSelectHooks []SkillHook
var skillAfterUpdateHooks []SkillHook
var skillAfterDeleteHooks []SkillHook
var skillAfterUpsertHooks []SkillHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Skill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Skill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Skill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Skill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Skill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Skill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Skill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Skill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Skill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range skillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSkillHook registers your hook function for all future operations.
func AddSkillHook(hookPoint boil.HookPoint, skillHook SkillHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		skillBeforeInsertHooks = append(skillBeforeInsertHooks, skillHook)
	case boil.BeforeUpdateHook:
		skillBeforeUpdateHooks = append(skillBeforeUpdateHooks, skillHook)
	case boil.BeforeDeleteHook:
		skillBeforeDeleteHooks = append(skillBeforeDeleteHooks, skillHook)
	case boil.BeforeUpsertHook:
		skillBeforeUpsertHooks = append(skillBeforeUpsertHooks, skillHook)
	case boil.AfterInsertHook:
		skillAfterInsertHooks = append(skillAfterInsertHooks, skillHook)
	case boil.AfterSelectHook:
		skillAfterSelectHooks = append(skillAfterSelectHooks, skillHook)
	case boil.AfterUpdateHook:
		skillAfterUpdateHooks = append(skillAfterUpdateHooks, skillHook)
	case boil.AfterDeleteHook:
		skillAfterDeleteHooks = append(skillAfterDeleteHooks, skillHook)
	case boil.AfterUpsertHook:
		skillAfterUpsertHooks = append(skillAfterUpsertHooks, skillHook)
	}
}

// One returns a single skill record from the query.
func (q skillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Skill, error) {
	o := &Skill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for skill")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Skill records from the query.
func (q skillQuery) All(ctx context.Context, exec boil.ContextExecutor) (SkillSlice, error) {
	var o []*Skill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Skill slice")
	}

	if len(skillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Skill records in the query.
func (q skillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count skill rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q skillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if skill exists")
	}

	return count > 0, nil
}

// JobSkillMaps retrieves all the job_skill_map's JobSkillMaps with an executor.
func (o *Skill) JobSkillMaps(mods ...qm.QueryMod) jobSkillMapQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job_skill_map\".\"skill_id\"=?", o.ID),
	)

	query := JobSkillMaps(queryMods...)
	queries.SetFrom(query.Query, "\"job_skill_map\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"job_skill_map\".*"})
	}

	return query
}

// RelatedSkillSkills retrieves all the skill's Skills with an executor via id column.
func (o *Skill) RelatedSkillSkills(mods ...qm.QueryMod) skillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"related_skills\" on \"skill\".\"id\" = \"related_skills\".\"related_skill_id\""),
		qm.Where("\"related_skills\".\"primary_skill_id\"=?", o.ID),
	)

	query := Skills(queryMods...)
	queries.SetFrom(query.Query, "\"skill\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"skill\".*"})
	}

	return query
}

// PrimarySkillSkills retrieves all the skill's Skills with an executor via id column.
func (o *Skill) PrimarySkillSkills(mods ...qm.QueryMod) skillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"related_skills\" on \"skill\".\"id\" = \"related_skills\".\"primary_skill_id\""),
		qm.Where("\"related_skills\".\"related_skill_id\"=?", o.ID),
	)

	query := Skills(queryMods...)
	queries.SetFrom(query.Query, "\"skill\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"skill\".*"})
	}

	return query
}

// LoadJobSkillMaps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (skillL) LoadJobSkillMaps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSkill interface{}, mods queries.Applicator) error {
	var slice []*Skill
	var object *Skill

	if singular {
		object = maybeSkill.(*Skill)
	} else {
		slice = *maybeSkill.(*[]*Skill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &skillR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &skillR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`job_skill_map`), qm.WhereIn(`job_skill_map.skill_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job_skill_map")
	}

	var resultSlice []*JobSkillMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job_skill_map")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job_skill_map")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_skill_map")
	}

	if len(jobSkillMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.JobSkillMaps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobSkillMapR{}
			}
			foreign.R.Skill = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkillID {
				local.R.JobSkillMaps = append(local.R.JobSkillMaps, foreign)
				if foreign.R == nil {
					foreign.R = &jobSkillMapR{}
				}
				foreign.R.Skill = local
				break
			}
		}
	}

	return nil
}

// LoadRelatedSkillSkills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (skillL) LoadRelatedSkillSkills(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSkill interface{}, mods queries.Applicator) error {
	var slice []*Skill
	var object *Skill

	if singular {
		object = maybeSkill.(*Skill)
	} else {
		slice = *maybeSkill.(*[]*Skill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &skillR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &skillR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"skill\".*, \"a\".\"primary_skill_id\""),
		qm.From("\"skill\""),
		qm.InnerJoin("\"related_skills\" as \"a\" on \"skill\".\"id\" = \"a\".\"related_skill_id\""),
		qm.WhereIn("\"a\".\"primary_skill_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load skill")
	}

	var resultSlice []*Skill

	var localJoinCols []string
	for results.Next() {
		one := new(Skill)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Title, &one.Description, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for skill")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice skill")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on skill")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for skill")
	}

	if len(skillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RelatedSkillSkills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &skillR{}
			}
			foreign.R.PrimarySkillSkills = append(foreign.R.PrimarySkillSkills, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.RelatedSkillSkills = append(local.R.RelatedSkillSkills, foreign)
				if foreign.R == nil {
					foreign.R = &skillR{}
				}
				foreign.R.PrimarySkillSkills = append(foreign.R.PrimarySkillSkills, local)
				break
			}
		}
	}

	return nil
}

// LoadPrimarySkillSkills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (skillL) LoadPrimarySkillSkills(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSkill interface{}, mods queries.Applicator) error {
	var slice []*Skill
	var object *Skill

	if singular {
		object = maybeSkill.(*Skill)
	} else {
		slice = *maybeSkill.(*[]*Skill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &skillR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &skillR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"skill\".*, \"a\".\"related_skill_id\""),
		qm.From("\"skill\""),
		qm.InnerJoin("\"related_skills\" as \"a\" on \"skill\".\"id\" = \"a\".\"primary_skill_id\""),
		qm.WhereIn("\"a\".\"related_skill_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load skill")
	}

	var resultSlice []*Skill

	var localJoinCols []string
	for results.Next() {
		one := new(Skill)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Title, &one.Description, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for skill")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice skill")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on skill")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for skill")
	}

	if len(skillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PrimarySkillSkills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &skillR{}
			}
			foreign.R.RelatedSkillSkills = append(foreign.R.RelatedSkillSkills, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.PrimarySkillSkills = append(local.R.PrimarySkillSkills, foreign)
				if foreign.R == nil {
					foreign.R = &skillR{}
				}
				foreign.R.RelatedSkillSkills = append(foreign.R.RelatedSkillSkills, local)
				break
			}
		}
	}

	return nil
}

// AddJobSkillMaps adds the given related objects to the existing relationships
// of the skill, optionally inserting them as new records.
// Appends related to o.R.JobSkillMaps.
// Sets related.R.Skill appropriately.
func (o *Skill) AddJobSkillMaps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobSkillMap) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkillID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job_skill_map\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"skill_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobSkillMapPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkillID = o.ID
		}
	}

	if o.R == nil {
		o.R = &skillR{
			JobSkillMaps: related,
		}
	} else {
		o.R.JobSkillMaps = append(o.R.JobSkillMaps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobSkillMapR{
				Skill: o,
			}
		} else {
			rel.R.Skill = o
		}
	}
	return nil
}

// AddRelatedSkillSkills adds the given related objects to the existing relationships
// of the skill, optionally inserting them as new records.
// Appends related to o.R.RelatedSkillSkills.
// Sets related.R.PrimarySkillSkills appropriately.
func (o *Skill) AddRelatedSkillSkills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Skill) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"related_skills\" (\"primary_skill_id\", \"related_skill_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &skillR{
			RelatedSkillSkills: related,
		}
	} else {
		o.R.RelatedSkillSkills = append(o.R.RelatedSkillSkills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &skillR{
				PrimarySkillSkills: SkillSlice{o},
			}
		} else {
			rel.R.PrimarySkillSkills = append(rel.R.PrimarySkillSkills, o)
		}
	}
	return nil
}

// SetRelatedSkillSkills removes all previously related items of the
// skill replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PrimarySkillSkills's RelatedSkillSkills accordingly.
// Replaces o.R.RelatedSkillSkills with related.
// Sets related.R.PrimarySkillSkills's RelatedSkillSkills accordingly.
func (o *Skill) SetRelatedSkillSkills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Skill) error {
	query := "delete from \"related_skills\" where \"primary_skill_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRelatedSkillSkillsFromPrimarySkillSkillsSlice(o, related)
	if o.R != nil {
		o.R.RelatedSkillSkills = nil
	}
	return o.AddRelatedSkillSkills(ctx, exec, insert, related...)
}

// RemoveRelatedSkillSkills relationships from objects passed in.
// Removes related items from R.RelatedSkillSkills (uses pointer comparison, removal does not keep order)
// Sets related.R.PrimarySkillSkills.
func (o *Skill) RemoveRelatedSkillSkills(ctx context.Context, exec boil.ContextExecutor, related ...*Skill) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"related_skills\" where \"primary_skill_id\" = $1 and \"related_skill_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRelatedSkillSkillsFromPrimarySkillSkillsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedSkillSkills {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedSkillSkills)
			if ln > 1 && i < ln-1 {
				o.R.RelatedSkillSkills[i] = o.R.RelatedSkillSkills[ln-1]
			}
			o.R.RelatedSkillSkills = o.R.RelatedSkillSkills[:ln-1]
			break
		}
	}

	return nil
}

func removeRelatedSkillSkillsFromPrimarySkillSkillsSlice(o *Skill, related []*Skill) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.PrimarySkillSkills {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.PrimarySkillSkills)
			if ln > 1 && i < ln-1 {
				rel.R.PrimarySkillSkills[i] = rel.R.PrimarySkillSkills[ln-1]
			}
			rel.R.PrimarySkillSkills = rel.R.PrimarySkillSkills[:ln-1]
			break
		}
	}
}

// AddPrimarySkillSkills adds the given related objects to the existing relationships
// of the skill, optionally inserting them as new records.
// Appends related to o.R.PrimarySkillSkills.
// Sets related.R.RelatedSkillSkills appropriately.
func (o *Skill) AddPrimarySkillSkills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Skill) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"related_skills\" (\"related_skill_id\", \"primary_skill_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &skillR{
			PrimarySkillSkills: related,
		}
	} else {
		o.R.PrimarySkillSkills = append(o.R.PrimarySkillSkills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &skillR{
				RelatedSkillSkills: SkillSlice{o},
			}
		} else {
			rel.R.RelatedSkillSkills = append(rel.R.RelatedSkillSkills, o)
		}
	}
	return nil
}

// SetPrimarySkillSkills removes all previously related items of the
// skill replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedSkillSkills's PrimarySkillSkills accordingly.
// Replaces o.R.PrimarySkillSkills with related.
// Sets related.R.RelatedSkillSkills's PrimarySkillSkills accordingly.
func (o *Skill) SetPrimarySkillSkills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Skill) error {
	query := "delete from \"related_skills\" where \"related_skill_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePrimarySkillSkillsFromRelatedSkillSkillsSlice(o, related)
	if o.R != nil {
		o.R.PrimarySkillSkills = nil
	}
	return o.AddPrimarySkillSkills(ctx, exec, insert, related...)
}

// RemovePrimarySkillSkills relationships from objects passed in.
// Removes related items from R.PrimarySkillSkills (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedSkillSkills.
func (o *Skill) RemovePrimarySkillSkills(ctx context.Context, exec boil.ContextExecutor, related ...*Skill) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"related_skills\" where \"related_skill_id\" = $1 and \"primary_skill_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePrimarySkillSkillsFromRelatedSkillSkillsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PrimarySkillSkills {
			if rel != ri {
				continue
			}

			ln := len(o.R.PrimarySkillSkills)
			if ln > 1 && i < ln-1 {
				o.R.PrimarySkillSkills[i] = o.R.PrimarySkillSkills[ln-1]
			}
			o.R.PrimarySkillSkills = o.R.PrimarySkillSkills[:ln-1]
			break
		}
	}

	return nil
}

func removePrimarySkillSkillsFromRelatedSkillSkillsSlice(o *Skill, related []*Skill) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.RelatedSkillSkills {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.RelatedSkillSkills)
			if ln > 1 && i < ln-1 {
				rel.R.RelatedSkillSkills[i] = rel.R.RelatedSkillSkills[ln-1]
			}
			rel.R.RelatedSkillSkills = rel.R.RelatedSkillSkills[:ln-1]
			break
		}
	}
}

// Skills retrieves all the records using an executor.
func Skills(mods ...qm.QueryMod) skillQuery {
	mods = append(mods, qm.From("\"skill\""))
	return skillQuery{NewQuery(mods...)}
}

// FindSkill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSkill(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Skill, error) {
	skillObj := &Skill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"skill\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, skillObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from skill")
	}

	return skillObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Skill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no skill provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(skillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	skillInsertCacheMut.RLock()
	cache, cached := skillInsertCache[key]
	skillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			skillAllColumns,
			skillColumnsWithDefault,
			skillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(skillType, skillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(skillType, skillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"skill\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"skill\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into skill")
	}

	if !cached {
		skillInsertCacheMut.Lock()
		skillInsertCache[key] = cache
		skillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Skill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Skill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	skillUpdateCacheMut.RLock()
	cache, cached := skillUpdateCache[key]
	skillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			skillAllColumns,
			skillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update skill, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"skill\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, skillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(skillType, skillMapping, append(wl, skillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update skill row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for skill")
	}

	if !cached {
		skillUpdateCacheMut.Lock()
		skillUpdateCache[key] = cache
		skillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q skillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for skill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for skill")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SkillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), skillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"skill\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, skillPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in skill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all skill")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Skill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no skill provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(skillColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	skillUpsertCacheMut.RLock()
	cache, cached := skillUpsertCache[key]
	skillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			skillAllColumns,
			skillColumnsWithDefault,
			skillColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			skillAllColumns,
			skillPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert skill, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(skillPrimaryKeyColumns))
			copy(conflict, skillPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"skill\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(skillType, skillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(skillType, skillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert skill")
	}

	if !cached {
		skillUpsertCacheMut.Lock()
		skillUpsertCache[key] = cache
		skillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Skill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Skill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Skill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), skillPrimaryKeyMapping)
	sql := "DELETE FROM \"skill\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from skill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for skill")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q skillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no skillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from skill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for skill")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SkillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(skillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), skillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"skill\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, skillPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from skill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for skill")
	}

	if len(skillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Skill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSkill(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SkillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SkillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), skillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"skill\".* FROM \"skill\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, skillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SkillSlice")
	}

	*o = slice

	return nil
}

// SkillExists checks if the Skill row exists.
func SkillExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"skill\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if skill exists")
	}

	return exists, nil
}
