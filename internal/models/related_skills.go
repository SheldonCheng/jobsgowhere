// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RelatedSkill is an object representing the database table.
type RelatedSkill struct {
	PrimarySkillID string `boil:"primary_skill_id" json:"primary_skill_id" toml:"primary_skill_id" yaml:"primary_skill_id"`
	RelatedSkillID string `boil:"related_skill_id" json:"related_skill_id" toml:"related_skill_id" yaml:"related_skill_id"`

	R *relatedSkillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L relatedSkillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RelatedSkillColumns = struct {
	PrimarySkillID string
	RelatedSkillID string
}{
	PrimarySkillID: "primary_skill_id",
	RelatedSkillID: "related_skill_id",
}

// Generated where

var RelatedSkillWhere = struct {
	PrimarySkillID whereHelperstring
	RelatedSkillID whereHelperstring
}{
	PrimarySkillID: whereHelperstring{field: "\"related_skills\".\"primary_skill_id\""},
	RelatedSkillID: whereHelperstring{field: "\"related_skills\".\"related_skill_id\""},
}

// RelatedSkillRels is where relationship names are stored.
var RelatedSkillRels = struct {
}{}

// relatedSkillR is where relationships are stored.
type relatedSkillR struct {
}

// NewStruct creates a new relationship struct
func (*relatedSkillR) NewStruct() *relatedSkillR {
	return &relatedSkillR{}
}

// relatedSkillL is where Load methods for each relationship are stored.
type relatedSkillL struct{}

var (
	relatedSkillAllColumns            = []string{"primary_skill_id", "related_skill_id"}
	relatedSkillColumnsWithoutDefault = []string{"primary_skill_id", "related_skill_id"}
	relatedSkillColumnsWithDefault    = []string{}
	relatedSkillPrimaryKeyColumns     = []string{"primary_skill_id", "related_skill_id"}
)

type (
	// RelatedSkillSlice is an alias for a slice of pointers to RelatedSkill.
	// This should generally be used opposed to []RelatedSkill.
	RelatedSkillSlice []*RelatedSkill
	// RelatedSkillHook is the signature for custom RelatedSkill hook methods
	RelatedSkillHook func(context.Context, boil.ContextExecutor, *RelatedSkill) error

	relatedSkillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	relatedSkillType                 = reflect.TypeOf(&RelatedSkill{})
	relatedSkillMapping              = queries.MakeStructMapping(relatedSkillType)
	relatedSkillPrimaryKeyMapping, _ = queries.BindMapping(relatedSkillType, relatedSkillMapping, relatedSkillPrimaryKeyColumns)
	relatedSkillInsertCacheMut       sync.RWMutex
	relatedSkillInsertCache          = make(map[string]insertCache)
	relatedSkillUpdateCacheMut       sync.RWMutex
	relatedSkillUpdateCache          = make(map[string]updateCache)
	relatedSkillUpsertCacheMut       sync.RWMutex
	relatedSkillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var relatedSkillBeforeInsertHooks []RelatedSkillHook
var relatedSkillBeforeUpdateHooks []RelatedSkillHook
var relatedSkillBeforeDeleteHooks []RelatedSkillHook
var relatedSkillBeforeUpsertHooks []RelatedSkillHook

var relatedSkillAfterInsertHooks []RelatedSkillHook
var relatedSkillAfterSelectHooks []RelatedSkillHook
var relatedSkillAfterUpdateHooks []RelatedSkillHook
var relatedSkillAfterDeleteHooks []RelatedSkillHook
var relatedSkillAfterUpsertHooks []RelatedSkillHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RelatedSkill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RelatedSkill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RelatedSkill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RelatedSkill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RelatedSkill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RelatedSkill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RelatedSkill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RelatedSkill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RelatedSkill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relatedSkillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRelatedSkillHook registers your hook function for all future operations.
func AddRelatedSkillHook(hookPoint boil.HookPoint, relatedSkillHook RelatedSkillHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		relatedSkillBeforeInsertHooks = append(relatedSkillBeforeInsertHooks, relatedSkillHook)
	case boil.BeforeUpdateHook:
		relatedSkillBeforeUpdateHooks = append(relatedSkillBeforeUpdateHooks, relatedSkillHook)
	case boil.BeforeDeleteHook:
		relatedSkillBeforeDeleteHooks = append(relatedSkillBeforeDeleteHooks, relatedSkillHook)
	case boil.BeforeUpsertHook:
		relatedSkillBeforeUpsertHooks = append(relatedSkillBeforeUpsertHooks, relatedSkillHook)
	case boil.AfterInsertHook:
		relatedSkillAfterInsertHooks = append(relatedSkillAfterInsertHooks, relatedSkillHook)
	case boil.AfterSelectHook:
		relatedSkillAfterSelectHooks = append(relatedSkillAfterSelectHooks, relatedSkillHook)
	case boil.AfterUpdateHook:
		relatedSkillAfterUpdateHooks = append(relatedSkillAfterUpdateHooks, relatedSkillHook)
	case boil.AfterDeleteHook:
		relatedSkillAfterDeleteHooks = append(relatedSkillAfterDeleteHooks, relatedSkillHook)
	case boil.AfterUpsertHook:
		relatedSkillAfterUpsertHooks = append(relatedSkillAfterUpsertHooks, relatedSkillHook)
	}
}

// One returns a single relatedSkill record from the query.
func (q relatedSkillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RelatedSkill, error) {
	o := &RelatedSkill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for related_skills")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RelatedSkill records from the query.
func (q relatedSkillQuery) All(ctx context.Context, exec boil.ContextExecutor) (RelatedSkillSlice, error) {
	var o []*RelatedSkill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RelatedSkill slice")
	}

	if len(relatedSkillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RelatedSkill records in the query.
func (q relatedSkillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count related_skills rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q relatedSkillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if related_skills exists")
	}

	return count > 0, nil
}

// RelatedSkills retrieves all the records using an executor.
func RelatedSkills(mods ...qm.QueryMod) relatedSkillQuery {
	mods = append(mods, qm.From("\"related_skills\""))
	return relatedSkillQuery{NewQuery(mods...)}
}

// FindRelatedSkill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRelatedSkill(ctx context.Context, exec boil.ContextExecutor, primarySkillID string, relatedSkillID string, selectCols ...string) (*RelatedSkill, error) {
	relatedSkillObj := &RelatedSkill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"related_skills\" where \"primary_skill_id\"=$1 AND \"related_skill_id\"=$2", sel,
	)

	q := queries.Raw(query, primarySkillID, relatedSkillID)

	err := q.Bind(ctx, exec, relatedSkillObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from related_skills")
	}

	return relatedSkillObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RelatedSkill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no related_skills provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relatedSkillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	relatedSkillInsertCacheMut.RLock()
	cache, cached := relatedSkillInsertCache[key]
	relatedSkillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			relatedSkillAllColumns,
			relatedSkillColumnsWithDefault,
			relatedSkillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(relatedSkillType, relatedSkillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(relatedSkillType, relatedSkillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"related_skills\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"related_skills\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into related_skills")
	}

	if !cached {
		relatedSkillInsertCacheMut.Lock()
		relatedSkillInsertCache[key] = cache
		relatedSkillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RelatedSkill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RelatedSkill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	relatedSkillUpdateCacheMut.RLock()
	cache, cached := relatedSkillUpdateCache[key]
	relatedSkillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			relatedSkillAllColumns,
			relatedSkillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update related_skills, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"related_skills\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, relatedSkillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(relatedSkillType, relatedSkillMapping, append(wl, relatedSkillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update related_skills row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for related_skills")
	}

	if !cached {
		relatedSkillUpdateCacheMut.Lock()
		relatedSkillUpdateCache[key] = cache
		relatedSkillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q relatedSkillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for related_skills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for related_skills")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RelatedSkillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relatedSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"related_skills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, relatedSkillPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in relatedSkill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all relatedSkill")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RelatedSkill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no related_skills provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relatedSkillColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	relatedSkillUpsertCacheMut.RLock()
	cache, cached := relatedSkillUpsertCache[key]
	relatedSkillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			relatedSkillAllColumns,
			relatedSkillColumnsWithDefault,
			relatedSkillColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			relatedSkillAllColumns,
			relatedSkillPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert related_skills, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(relatedSkillPrimaryKeyColumns))
			copy(conflict, relatedSkillPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"related_skills\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(relatedSkillType, relatedSkillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(relatedSkillType, relatedSkillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert related_skills")
	}

	if !cached {
		relatedSkillUpsertCacheMut.Lock()
		relatedSkillUpsertCache[key] = cache
		relatedSkillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RelatedSkill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RelatedSkill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RelatedSkill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), relatedSkillPrimaryKeyMapping)
	sql := "DELETE FROM \"related_skills\" WHERE \"primary_skill_id\"=$1 AND \"related_skill_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from related_skills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for related_skills")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q relatedSkillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no relatedSkillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from related_skills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for related_skills")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RelatedSkillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(relatedSkillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relatedSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"related_skills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relatedSkillPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from relatedSkill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for related_skills")
	}

	if len(relatedSkillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RelatedSkill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRelatedSkill(ctx, exec, o.PrimarySkillID, o.RelatedSkillID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RelatedSkillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RelatedSkillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relatedSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"related_skills\".* FROM \"related_skills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relatedSkillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RelatedSkillSlice")
	}

	*o = slice

	return nil
}

// RelatedSkillExists checks if the RelatedSkill row exists.
func RelatedSkillExists(ctx context.Context, exec boil.ContextExecutor, primarySkillID string, relatedSkillID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"related_skills\" where \"primary_skill_id\"=$1 AND \"related_skill_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, primarySkillID, relatedSkillID)
	}
	row := exec.QueryRowContext(ctx, sql, primarySkillID, relatedSkillID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if related_skills exists")
	}

	return exists, nil
}
