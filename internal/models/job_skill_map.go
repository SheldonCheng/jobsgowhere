// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// JobSkillMap is an object representing the database table.
type JobSkillMap struct {
	ID       string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	JobID    string    `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`
	SkillID  string    `boil:"skill_id" json:"skill_id" toml:"skill_id" yaml:"skill_id"`
	Required null.Bool `boil:"required" json:"required,omitempty" toml:"required" yaml:"required,omitempty"`

	R *jobSkillMapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jobSkillMapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JobSkillMapColumns = struct {
	ID       string
	JobID    string
	SkillID  string
	Required string
}{
	ID:       "id",
	JobID:    "job_id",
	SkillID:  "skill_id",
	Required: "required",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var JobSkillMapWhere = struct {
	ID       whereHelperstring
	JobID    whereHelperstring
	SkillID  whereHelperstring
	Required whereHelpernull_Bool
}{
	ID:       whereHelperstring{field: "\"job_skill_map\".\"id\""},
	JobID:    whereHelperstring{field: "\"job_skill_map\".\"job_id\""},
	SkillID:  whereHelperstring{field: "\"job_skill_map\".\"skill_id\""},
	Required: whereHelpernull_Bool{field: "\"job_skill_map\".\"required\""},
}

// JobSkillMapRels is where relationship names are stored.
var JobSkillMapRels = struct {
	Job   string
	Skill string
}{
	Job:   "Job",
	Skill: "Skill",
}

// jobSkillMapR is where relationships are stored.
type jobSkillMapR struct {
	Job   *Job
	Skill *Skill
}

// NewStruct creates a new relationship struct
func (*jobSkillMapR) NewStruct() *jobSkillMapR {
	return &jobSkillMapR{}
}

// jobSkillMapL is where Load methods for each relationship are stored.
type jobSkillMapL struct{}

var (
	jobSkillMapAllColumns            = []string{"id", "job_id", "skill_id", "required"}
	jobSkillMapColumnsWithoutDefault = []string{"id", "job_id", "skill_id"}
	jobSkillMapColumnsWithDefault    = []string{"required"}
	jobSkillMapPrimaryKeyColumns     = []string{"id"}
)

type (
	// JobSkillMapSlice is an alias for a slice of pointers to JobSkillMap.
	// This should generally be used opposed to []JobSkillMap.
	JobSkillMapSlice []*JobSkillMap
	// JobSkillMapHook is the signature for custom JobSkillMap hook methods
	JobSkillMapHook func(context.Context, boil.ContextExecutor, *JobSkillMap) error

	jobSkillMapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jobSkillMapType                 = reflect.TypeOf(&JobSkillMap{})
	jobSkillMapMapping              = queries.MakeStructMapping(jobSkillMapType)
	jobSkillMapPrimaryKeyMapping, _ = queries.BindMapping(jobSkillMapType, jobSkillMapMapping, jobSkillMapPrimaryKeyColumns)
	jobSkillMapInsertCacheMut       sync.RWMutex
	jobSkillMapInsertCache          = make(map[string]insertCache)
	jobSkillMapUpdateCacheMut       sync.RWMutex
	jobSkillMapUpdateCache          = make(map[string]updateCache)
	jobSkillMapUpsertCacheMut       sync.RWMutex
	jobSkillMapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jobSkillMapBeforeInsertHooks []JobSkillMapHook
var jobSkillMapBeforeUpdateHooks []JobSkillMapHook
var jobSkillMapBeforeDeleteHooks []JobSkillMapHook
var jobSkillMapBeforeUpsertHooks []JobSkillMapHook

var jobSkillMapAfterInsertHooks []JobSkillMapHook
var jobSkillMapAfterSelectHooks []JobSkillMapHook
var jobSkillMapAfterUpdateHooks []JobSkillMapHook
var jobSkillMapAfterDeleteHooks []JobSkillMapHook
var jobSkillMapAfterUpsertHooks []JobSkillMapHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JobSkillMap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JobSkillMap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JobSkillMap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JobSkillMap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JobSkillMap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JobSkillMap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JobSkillMap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JobSkillMap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JobSkillMap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobSkillMapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJobSkillMapHook registers your hook function for all future operations.
func AddJobSkillMapHook(hookPoint boil.HookPoint, jobSkillMapHook JobSkillMapHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		jobSkillMapBeforeInsertHooks = append(jobSkillMapBeforeInsertHooks, jobSkillMapHook)
	case boil.BeforeUpdateHook:
		jobSkillMapBeforeUpdateHooks = append(jobSkillMapBeforeUpdateHooks, jobSkillMapHook)
	case boil.BeforeDeleteHook:
		jobSkillMapBeforeDeleteHooks = append(jobSkillMapBeforeDeleteHooks, jobSkillMapHook)
	case boil.BeforeUpsertHook:
		jobSkillMapBeforeUpsertHooks = append(jobSkillMapBeforeUpsertHooks, jobSkillMapHook)
	case boil.AfterInsertHook:
		jobSkillMapAfterInsertHooks = append(jobSkillMapAfterInsertHooks, jobSkillMapHook)
	case boil.AfterSelectHook:
		jobSkillMapAfterSelectHooks = append(jobSkillMapAfterSelectHooks, jobSkillMapHook)
	case boil.AfterUpdateHook:
		jobSkillMapAfterUpdateHooks = append(jobSkillMapAfterUpdateHooks, jobSkillMapHook)
	case boil.AfterDeleteHook:
		jobSkillMapAfterDeleteHooks = append(jobSkillMapAfterDeleteHooks, jobSkillMapHook)
	case boil.AfterUpsertHook:
		jobSkillMapAfterUpsertHooks = append(jobSkillMapAfterUpsertHooks, jobSkillMapHook)
	}
}

// One returns a single jobSkillMap record from the query.
func (q jobSkillMapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobSkillMap, error) {
	o := &JobSkillMap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for job_skill_map")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JobSkillMap records from the query.
func (q jobSkillMapQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobSkillMapSlice, error) {
	var o []*JobSkillMap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JobSkillMap slice")
	}

	if len(jobSkillMapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JobSkillMap records in the query.
func (q jobSkillMapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count job_skill_map rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jobSkillMapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if job_skill_map exists")
	}

	return count > 0, nil
}

// Job pointed to by the foreign key.
func (o *JobSkillMap) Job(mods ...qm.QueryMod) jobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.JobID),
	}

	queryMods = append(queryMods, mods...)

	query := Jobs(queryMods...)
	queries.SetFrom(query.Query, "\"job\"")

	return query
}

// Skill pointed to by the foreign key.
func (o *JobSkillMap) Skill(mods ...qm.QueryMod) skillQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkillID),
	}

	queryMods = append(queryMods, mods...)

	query := Skills(queryMods...)
	queries.SetFrom(query.Query, "\"skill\"")

	return query
}

// LoadJob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobSkillMapL) LoadJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobSkillMap interface{}, mods queries.Applicator) error {
	var slice []*JobSkillMap
	var object *JobSkillMap

	if singular {
		object = maybeJobSkillMap.(*JobSkillMap)
	} else {
		slice = *maybeJobSkillMap.(*[]*JobSkillMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobSkillMapR{}
		}
		args = append(args, object.JobID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobSkillMapR{}
			}

			for _, a := range args {
				if a == obj.JobID {
					continue Outer
				}
			}

			args = append(args, obj.JobID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`job`), qm.WhereIn(`job.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for job")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job")
	}

	if len(jobSkillMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Job = foreign
		if foreign.R == nil {
			foreign.R = &jobR{}
		}
		foreign.R.JobSkillMaps = append(foreign.R.JobSkillMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JobID == foreign.ID {
				local.R.Job = foreign
				if foreign.R == nil {
					foreign.R = &jobR{}
				}
				foreign.R.JobSkillMaps = append(foreign.R.JobSkillMaps, local)
				break
			}
		}
	}

	return nil
}

// LoadSkill allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobSkillMapL) LoadSkill(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobSkillMap interface{}, mods queries.Applicator) error {
	var slice []*JobSkillMap
	var object *JobSkillMap

	if singular {
		object = maybeJobSkillMap.(*JobSkillMap)
	} else {
		slice = *maybeJobSkillMap.(*[]*JobSkillMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobSkillMapR{}
		}
		args = append(args, object.SkillID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobSkillMapR{}
			}

			for _, a := range args {
				if a == obj.SkillID {
					continue Outer
				}
			}

			args = append(args, obj.SkillID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`skill`), qm.WhereIn(`skill.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Skill")
	}

	var resultSlice []*Skill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Skill")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for skill")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for skill")
	}

	if len(jobSkillMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Skill = foreign
		if foreign.R == nil {
			foreign.R = &skillR{}
		}
		foreign.R.JobSkillMaps = append(foreign.R.JobSkillMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SkillID == foreign.ID {
				local.R.Skill = foreign
				if foreign.R == nil {
					foreign.R = &skillR{}
				}
				foreign.R.JobSkillMaps = append(foreign.R.JobSkillMaps, local)
				break
			}
		}
	}

	return nil
}

// SetJob of the jobSkillMap to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.JobSkillMaps.
func (o *JobSkillMap) SetJob(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Job) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_skill_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobSkillMapPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JobID = related.ID
	if o.R == nil {
		o.R = &jobSkillMapR{
			Job: related,
		}
	} else {
		o.R.Job = related
	}

	if related.R == nil {
		related.R = &jobR{
			JobSkillMaps: JobSkillMapSlice{o},
		}
	} else {
		related.R.JobSkillMaps = append(related.R.JobSkillMaps, o)
	}

	return nil
}

// SetSkill of the jobSkillMap to the related item.
// Sets o.R.Skill to related.
// Adds o to related.R.JobSkillMaps.
func (o *JobSkillMap) SetSkill(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Skill) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_skill_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"skill_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobSkillMapPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SkillID = related.ID
	if o.R == nil {
		o.R = &jobSkillMapR{
			Skill: related,
		}
	} else {
		o.R.Skill = related
	}

	if related.R == nil {
		related.R = &skillR{
			JobSkillMaps: JobSkillMapSlice{o},
		}
	} else {
		related.R.JobSkillMaps = append(related.R.JobSkillMaps, o)
	}

	return nil
}

// JobSkillMaps retrieves all the records using an executor.
func JobSkillMaps(mods ...qm.QueryMod) jobSkillMapQuery {
	mods = append(mods, qm.From("\"job_skill_map\""))
	return jobSkillMapQuery{NewQuery(mods...)}
}

// FindJobSkillMap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJobSkillMap(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*JobSkillMap, error) {
	jobSkillMapObj := &JobSkillMap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"job_skill_map\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jobSkillMapObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from job_skill_map")
	}

	return jobSkillMapObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JobSkillMap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_skill_map provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobSkillMapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jobSkillMapInsertCacheMut.RLock()
	cache, cached := jobSkillMapInsertCache[key]
	jobSkillMapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jobSkillMapAllColumns,
			jobSkillMapColumnsWithDefault,
			jobSkillMapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jobSkillMapType, jobSkillMapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jobSkillMapType, jobSkillMapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"job_skill_map\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"job_skill_map\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into job_skill_map")
	}

	if !cached {
		jobSkillMapInsertCacheMut.Lock()
		jobSkillMapInsertCache[key] = cache
		jobSkillMapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JobSkillMap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JobSkillMap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jobSkillMapUpdateCacheMut.RLock()
	cache, cached := jobSkillMapUpdateCache[key]
	jobSkillMapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jobSkillMapAllColumns,
			jobSkillMapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update job_skill_map, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"job_skill_map\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jobSkillMapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jobSkillMapType, jobSkillMapMapping, append(wl, jobSkillMapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update job_skill_map row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for job_skill_map")
	}

	if !cached {
		jobSkillMapUpdateCacheMut.Lock()
		jobSkillMapUpdateCache[key] = cache
		jobSkillMapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jobSkillMapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for job_skill_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for job_skill_map")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JobSkillMapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSkillMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"job_skill_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jobSkillMapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in jobSkillMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all jobSkillMap")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JobSkillMap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no job_skill_map provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobSkillMapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jobSkillMapUpsertCacheMut.RLock()
	cache, cached := jobSkillMapUpsertCache[key]
	jobSkillMapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jobSkillMapAllColumns,
			jobSkillMapColumnsWithDefault,
			jobSkillMapColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jobSkillMapAllColumns,
			jobSkillMapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert job_skill_map, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(jobSkillMapPrimaryKeyColumns))
			copy(conflict, jobSkillMapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"job_skill_map\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(jobSkillMapType, jobSkillMapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jobSkillMapType, jobSkillMapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert job_skill_map")
	}

	if !cached {
		jobSkillMapUpsertCacheMut.Lock()
		jobSkillMapUpsertCache[key] = cache
		jobSkillMapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JobSkillMap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JobSkillMap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JobSkillMap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jobSkillMapPrimaryKeyMapping)
	sql := "DELETE FROM \"job_skill_map\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from job_skill_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for job_skill_map")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jobSkillMapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no jobSkillMapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from job_skill_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_skill_map")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JobSkillMapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jobSkillMapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSkillMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"job_skill_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobSkillMapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jobSkillMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for job_skill_map")
	}

	if len(jobSkillMapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JobSkillMap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJobSkillMap(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobSkillMapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JobSkillMapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobSkillMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"job_skill_map\".* FROM \"job_skill_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobSkillMapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JobSkillMapSlice")
	}

	*o = slice

	return nil
}

// JobSkillMapExists checks if the JobSkillMap row exists.
func JobSkillMapExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"job_skill_map\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if job_skill_map exists")
	}

	return exists, nil
}
